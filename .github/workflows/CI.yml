# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events for all branches
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./app

    services:
      db_service:
        image: postgres
        env:
          POSTGRES_USER: sampl_user
          POSTGRES_DB: sampl
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.7"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v3.2.4
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}-${{ hashFiles('**/Pipfile') }}

      - name: Run mypy on ever-given
        working-directory: ./ever_given
        run: |
          pipenv install --dev
          pipenv run pylint ever_given
          pipenv run mypy ever_given

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev --deploy

      - name: Install evergiven locally
        run: |
          pipenv run pip uninstall -y ever-given
          pipenv install -e ../ever_given/

      - name: Install Singularity
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: 3.7.2 # same version as hpc3

      - name: Test ever-given
        run: |
          pipenv run pytest --cov=../ever_given --cov-report=xml -s ../ever_given --docker --singularity
    
      - name: Run app test suite on Docker
        run: |
          pipenv run pytest --cov-append --cov=./ --cov-report=xml -s . --docker
        env:
          RDS_HOSTNAME: localhost
          RDS_DB_NAME: sampl
          RDS_PASSWORD: postgres
          RDS_PORT: 5432
          RDS_USERNAME: sampl_user
          DJANGO_SETTINGS_MODULE: sampl.settings_test
          ECR_BASE_URL: "103125031445.dkr.ecr.us-east-2.amazonaws.com"
          ECR_SAMPLLEAGUE_URL: "103125031445.dkr.ecr.us-east-2.amazonaws.com/sampl-league"

      - name: Run app test suite on Singularity
        run: |
          pipenv run pytest --cov-append --cov=./ --cov=../ever_given --cov-report=xml -s . ../ever_given --singularity
        env:
          RDS_HOSTNAME: localhost
          RDS_DB_NAME: sampl
          RDS_PASSWORD: postgres
          RDS_PORT: 5432
          RDS_USERNAME: sampl_user
          DJANGO_SETTINGS_MODULE: sampl.settings_test
          ECR_BASE_URL: "103125031445.dkr.ecr.us-east-2.amazonaws.com"
          ECR_SAMPLLEAGUE_URL: "103125031445.dkr.ecr.us-east-2.amazonaws.com/sampl-league"

      - name: Upload test coverage
        uses: codecov/codecov-action@v3.0.0
        with:
          fail_ci_if_error: true
          directory: app/
